class myNotes {
  constructor() {
    this.deleteButton = document.querySelectorAll(".delete-note");
    this.editButton = document.querySelectorAll(".edit-note");
    this.updateButton = document.querySelectorAll(".update-note");
    this.noteValues = {};
    this.events();
  }

  events() {
    this.deleteButton.forEach((el) => {
      el.addEventListener("click", (el) => {
        el.preventDefault();
        this.deleteNote(el);
      });
    });
    this.editButton.forEach((el) => {
      el.addEventListener("click", (el) => {
        el.preventDefault();
        this.editNote(el);
      });
    });
    this.updateButton.forEach((el) => {
      el.addEventListener("click", (el) => {
        el.preventDefault();
        this.updateNote(el);
      });
    });
  }

  updateNote = (e) => {
    const thisNote = e.target.closest("li");

    const title = thisNote.querySelector(".note-title-field").value;
    const content = thisNote.querySelector(".note-body-field").value;

    this.noteValues[thisNote.dataset.id] = { title: title, content: content };
    const opts = {
      data: updatedPost,
      method: "POST",
      headers: {
        "content-type": "application/json",
        "X-WP-Nonce": universityData.nonce,
      },
      credentials: "same-origin",
    };

    async function load() {
      console.log(updatedPost);
      console.log(opts);
      const url =
        universityData.root_url + "/wp-json/wp/v2/note/" + thisNote.dataset.id;

      const obj = await (await fetch(url, opts)).json();
      console.log(obj);
      return obj;
    }
    (async () => {
      try {
        const obj = await load();
        console.log(obj);
        this.makeNoteReadOnly(thisNote);
      } catch (e) {
        console.log(e);
      }
    })();
  };

  editNote = (e) => {
    let thisNote;
    if (e.path.length == 8) {
      thisNote = e.path[1];
    } else if (e.path.length > 8) {
      thisNote = e.path[2];
    } else {
      console.log("error");
    }

    if (thisNote.dataset.state == "editable") {
      this.makeNoteReadOnly(thisNote);
    } else {
      this.makeNoteEditable(thisNote);
    }
  };
  makeNoteEditable = (thisNote) => {
    thisNote.querySelector(".edit-note").innerHTML =
      '<i class="fa fa-times" aria-hidden="true"></i> Cancel';

    thisNote.querySelector(".note-title-field").removeAttribute("readonly");
    thisNote.querySelector(".note-body-field").removeAttribute("readonly");
    thisNote
      .querySelector(".note-title-field")
      .classList.add("note-active-field");
    thisNote
      .querySelector(".note-body-field")
      .classList.add("note-active-field");
    thisNote
      .querySelector(".update-note")
      .classList.add("update-note--visible");
    thisNote.dataset.state = "editable";
  };

  makeNoteReadOnly = (thisNote) => {
    thisNote.querySelector(".edit-note").innerHTML =
      '<i class="fa fa-pencil" aria-hidden="true"></i> Edit';

    thisNote
      .querySelector(".note-title-field")
      .setAttribute("readonly", "readonly");
    thisNote
      .querySelector(".note-body-field")
      .setAttribute("readonly", "readonly");
    thisNote
      .querySelector(".note-title-field")
      .classList.remove("note-active-field");
    thisNote
      .querySelector(".note-body-field")
      .classList.remove("note-active-field");
    thisNote
      .querySelector(".update-note")
      .classList.remove("update-note--visible");
    thisNote.dataset.state = "non-editable";
  };

  deleteNote = (e) => {
    let thisNote;
    if (e.path.length == 8) {
      thisNote = e.path[1];
    } else if (e.path.length > 8) {
      thisNote = e.path[2];
    } else {
      console.log("error");
    }
    const opts = {
      method: "DELETE",
      headers: {
        "content-type": "application/json",
        "X-WP-Nonce": universityData.nonce,
      },
      credentials: "same-origin",
    };

    async function load() {
      const url =
        universityData.root_url + "/wp-json/wp/v2/note/" + thisNote.dataset.id;
      const obj = await (await fetch(url, opts)).json();
      return obj;
    }
    (async () => {
      try {
        const obj = await load();
        console.log(obj);
        thisNote.style.display = "none";
      } catch (e) {
        console.log(e);
      }
    })();
  };
}
export default myNotes;
